/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BrainzUp;

import java.awt.CardLayout;
import java.awt.LayoutManager;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.ImageIcon;

/**
 *
 * @author Dennis
 */
public class GameResult extends javax.swing.JPanel {

    private ArrayList<GameInfo> gameRound;
    private ArrayList<Member> current;
    private ArrayList<BadgeInfo> badgez;
    int round;
    int score;
    String subject;
    String correct;
    String userName;
    File inFile;
    FileInputStream finStream;
    ObjectInputStream oinStream;
    File outFile;
    FileOutputStream fStream;
    ObjectOutputStream oStream;
    String curPlay;
    String[] badges;
    String roundCheck;
    int game;
    int badge = 0;

    /**
     * Creates new form CorrectWrong
     */
    public GameResult() {
        initComponents();
        ArrayList<GameInfo> gameRound = new ArrayList<>();
        ArrayList<Member> current = new ArrayList<>();
        ArrayList<BadgeInfo> badgez = new ArrayList<>();
        badges = new String[25];
        roundCheck = "";
        game = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resultPic = new javax.swing.JLabel();
        Logo = new javax.swing.JLabel();
        curPlayer = new javax.swing.JLabel();
        CW_Bkgrd = new javax.swing.JLabel();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(resultPic, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 210, 190));

        Logo.setFont(new java.awt.Font("Lucida Sans Typewriter", 1, 40)); // NOI18N
        Logo.setForeground(new java.awt.Color(0, 153, 0));
        Logo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Logo.setText("BrainzUp");
        add(Logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 230, 50));

        curPlayer.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        curPlayer.setForeground(new java.awt.Color(0, 0, 204));
        curPlayer.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        add(curPlayer, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, -1, -1));

        CW_Bkgrd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/hand_wallpaper.jpg"))); // NOI18N
        CW_Bkgrd.setMaximumSize(new java.awt.Dimension(0, 0));
        CW_Bkgrd.setMinimumSize(new java.awt.Dimension(0, 0));
        CW_Bkgrd.setPreferredSize(new java.awt.Dimension(0, 0));
        add(CW_Bkgrd, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 530, 420));
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        //current player info is retrieved from current.dat file
        try {
            inFile = new File("./src/SaveFiles/current.dat");
            finStream = new FileInputStream(inFile);
            oinStream = new ObjectInputStream(finStream);
            current = (ArrayList<Member>) oinStream.readObject();

            for (Member r : current) {
                curPlay = r.getName();
                oinStream.close();
            }
            current.clear();
        } catch (IOException | ClassNotFoundException | NullPointerException e) {
            System.out.println(e);
        }
        curPlayer.setText(curPlay);
        //player's badgeinfo is retrieved from badgeInfo.dat file
        try {
            inFile = new File("./src/SaveFiles/badgeInfo.dat");
            finStream = new FileInputStream(inFile);
            oinStream = new ObjectInputStream(finStream);
            badgez = (ArrayList<BadgeInfo>) oinStream.readObject();

            for (BadgeInfo b : badgez) {
                if (b.getUserName().equals(curPlay)) {
                    badges[0] = b.getUserName();
                    badges[1] = b.getA1();
                    badges[2] = b.getA2();
                    badges[3] = b.getA3();
                    badges[4] = b.getA4();
                    badges[5] = b.getA5();
                    badges[6] = b.getA6();
                    badges[7] = b.getC1();
                    badges[8] = b.getC2();
                    badges[9] = b.getC3();
                    badges[10] = b.getC4();
                    badges[11] = b.getC5();
                    badges[12] = b.getC6();
                    badges[13] = b.getN1();
                    badges[14] = b.getN2();
                    badges[15] = b.getN3();
                    badges[16] = b.getN4();
                    badges[17] = b.getN5();
                    badges[18] = b.getN6();
                    badges[19] = b.getS1();
                    badges[20] = b.getS2();
                    badges[21] = b.getS3();
                    badges[22] = b.getS4();
                    badges[23] = b.getS5();
                    badges[24] = b.getS6();
                } else if (curPlay.equals("guest")) {
                    badges[0] = curPlay;
                    for (int i = 1; i < badges.length; i++) {
                        badges[i] = "no";
                    }
                }
                oinStream.close();
            }

        } catch (IOException | ClassNotFoundException | NullPointerException e) {
            System.out.println(e);
        }
        try {
            File inFile = new File("./src/SaveFiles/gameInfo.dat");
            FileInputStream finStream = new FileInputStream(inFile);
            ObjectInputStream oinStream = new ObjectInputStream(finStream);
            gameRound = (ArrayList<GameInfo>) oinStream.readObject();

            for (GameInfo r : gameRound) {
                round = r.getRound();
                score = r.getScore();
                subject = r.getSubject();
                correct = r.getCorrect();
                game = r.getGame();
                oinStream.close();
            }
            gameRound.clear();
        } catch (IOException | ClassNotFoundException | NullPointerException e) {
            System.out.println(e);
        }

        ImageIcon correctPic = new ImageIcon(getClass().getResource("/Images/AnsCorrect.jpeg"));
        ImageIcon incorrectPic = new ImageIcon(getClass().getResource("/Images/AnsIncorrect.jpeg"));
        ImageIcon badgeWon = new ImageIcon(getClass().getResource("/Images/badgeWon.jpg"));

        badge = 0;
        switch (subject) {
            case "colours":
                badge = badge + 6;
                break;
            case "numbers":
                badge = badge + 12;
                break;
            case "shapes":
                badge = badge + 18;
                break;
        }
        switch (game) {
            case 1:
                badge = badge + 1;
                break;
            case 2:
                badge = badge + 3;
                break;
            case 3:
                badge = badge + 5;
                break;
        }

        if (badges[badge].equals("no")) {                       //player has no badges for this game type yet
            if (correct.equals("true")) {
                if (round < 4) {                                //correct answer, less than 3 rounds played
                    roundCheck = "again";
                    resultPic.setIcon(correctPic);
                } else if (round == 4 && score == 3) {          //correct answer, 3 rounds played, badge won!
                    roundCheck = "done";
                    if (!curPlay.equals("guest")) {             //only logged in player gets badge
                        resultPic.setIcon(badgeWon);
                        badges[badge] = "yes";
                    } else {
                        resultPic.setIcon(correctPic);          //no badges for guest
                    }
                }
            } else if (round == 4 && score < 3) {               //incorrect answer, 3 rounds played
                roundCheck = "done";
                resultPic.setIcon(incorrectPic);
            } else {                                            //incorrect answer, less than 3 rounds played
                roundCheck = "again";
                resultPic.setIcon(incorrectPic);
            }
        } else if (badges[badge].equals("yes") && badges[badge + 1].equals("no")) { //player only has badge 1 for this game type
            if (correct.equals("true")){
                if(round < 7){                                  //correct answer, less than 6 rounds played
                roundCheck = "again";
                resultPic.setIcon(correctPic);
                }
            else if (round == 7 && score == 6) {                //correct answer, 6 rounds played, badge won!
                roundCheck = "done";
                resultPic.setIcon(badgeWon);
                badges[badge + 1] = "yes";
            }}
            else if (round == 7 && score < 6) {                 //incorrect answer, 6 rounds played
                roundCheck = "done";
                resultPic.setIcon(incorrectPic);
            } else {                                            //incorrect answer, less than 6 rounds played
                roundCheck = "again";
                resultPic.setIcon(incorrectPic);
            }
        } else {                                                //player only has both badges for this game type
            if (correct.equals("true")) {
                if (round < 7) {                                //correct answer, less than 6 rounds played
                    roundCheck = "again";
                    resultPic.setIcon(correctPic);
                } else if (round == 7 && score == 6) {          //correct answer, 6 rounds played
                    roundCheck = "done";
                    resultPic.setIcon(correctPic);
                }
            } else if (round == 7 && score < 6) {               //incorrect answer, 6 rounds played
                roundCheck = "done";
                resultPic.setIcon(incorrectPic);
            } else {                                            //incorrect answer, less than 6 rounds played
                roundCheck = "again";
                resultPic.setIcon(incorrectPic);
            }
        }

//                    if (correct.equals("true") && round < 4 && score < 3) {
//                roundCheck = "again";
//                resultPic.setIcon(correctPic);
//            } 
//            else if (correct.equals("true") && round < 7 && score < 6) {
//                roundCheck = "again";
//                resultPic.setIcon(correctPic);
//            }else if (correct.equals("true") && round == 4 && score == 3) {
//                roundCheck = "done";
//                resultPic.setIcon(correctPic);
//            }else if (correct.equals("true") && round == 7 && score == 6) {
//                roundCheck = "done";
//                resultPic.setIcon(correctPic);
//            } 
//            else if (round == 7 && score < 6) {
//                roundCheck = "done";
//                resultPic.setIcon(correctPic);
//            } else {
//                roundCheck = "again";
//                resultPic.setIcon(incorrectPic);
//            }
        File outFile;
        FileOutputStream fStream;
        ObjectOutputStream oStream;

        GameInfo g = new GameInfo(round, score, subject, "false", userName, game);
        gameRound.add(g);
        //The ArrayList is saved to the gameInfo.dat file using the file output process
        try {
            outFile = new File("./src/SaveFiles/gameInfo.dat");
            fStream = new FileOutputStream(outFile);
            oStream = new ObjectOutputStream(fStream);
            oStream.writeObject(gameRound);
            oStream.close();
        } catch (IOException e) {
            System.out.println(e);
        }
        //The ArrayList is cleared
        gameRound.clear();

        //updated badge info is saved to badgeinfo.dat file
        for (BadgeInfo b : badgez) {
            if (b.getUserName().equals(curPlay)) {
                b.setA1(badges[1]);
                b.setA2(badges[2]);
                b.setA3(badges[3]);
                b.setA4(badges[4]);
                b.setA5(badges[5]);
                b.setA6(badges[6]);
                b.setC1(badges[7]);
                b.setC2(badges[8]);
                b.setC3(badges[9]);
                b.setC4(badges[10]);
                b.setC5(badges[11]);
                b.setC6(badges[12]);
                b.setN1(badges[13]);
                b.setN2(badges[14]);
                b.setN3(badges[15]);
                b.setN4(badges[16]);
                b.setN5(badges[17]);
                b.setN6(badges[18]);
                b.setS1(badges[19]);
                b.setS2(badges[20]);
                b.setS3(badges[21]);
                b.setS4(badges[22]);
                b.setS5(badges[23]);
                b.setS6(badges[24]);
            }
        }
        try {
            outFile = new File("./src/SaveFiles/badgeInfo.dat");
            fStream = new FileOutputStream(outFile);
            oStream = new ObjectOutputStream(fStream);
            oStream.writeObject(badgez);
            oStream.close();
        } catch (IOException e) {
            System.out.println(e);
        }
        badgez.clear();

    }//GEN-LAST:event_formComponentShown

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        //Player is either brought back to next game round, or back to main game screen if all rounds finished
        LayoutManager layout = getParent().getLayout();
        if (roundCheck.equals("done")) {
            if (layout instanceof CardLayout) {
                CardLayout cl = (CardLayout) layout;
                cl.show(getParent(), "PLAY");
            }
        } else {
            if (game == 1) {
                if (layout instanceof CardLayout) {
                    CardLayout cl = (CardLayout) layout;
                    cl.show(getParent(), "GAME1");
                }
            } else if (game == 2) {
                if (layout instanceof CardLayout) {
                    CardLayout cl = (CardLayout) layout;
                    cl.show(getParent(), "GAME2");
                }
            } else {
                if (layout instanceof CardLayout) {
                    CardLayout cl = (CardLayout) layout;
                    cl.show(getParent(), "GAME3");
                }
            }
        }
    }//GEN-LAST:event_formMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CW_Bkgrd;
    private javax.swing.JLabel Logo;
    private javax.swing.JLabel curPlayer;
    private javax.swing.JLabel resultPic;
    // End of variables declaration//GEN-END:variables
}
